@page "/sendtax"

@inject HttpClient Http
@using SendTaxDataApp.Shared
@using SendTaxDataApp.Models
@using SendTaxDataApp.Models.Enums
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System;
@using SendTaxDataApp.Helpers;
@using System.Text.Json;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Globalization

@* <EditForm Model="@model" OnValidSubmit="OnValidSubmit"> *@
 @* <DataAnnotationsValidator/> *@
 
<MudGrid>
    <MudItem xs="8" sm="5">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="شماره اقتصادی خرید" HelperText="Max. 8 characters"
                              @bind-Value="model.Tinb" For="@(() => model.Tinb)"/>
                <MudTextField Label="شماره اقتصادی فروشنده"
                              @bind-Value="model.Tins" For="@(() => model.Tins)"/>
                <MudSelect T="InvoiceSubjectType"  ValueChanged="@SubjectTypeChanged" Label="موضوع صورت حساب"  AnchorOrigin="Origin.BottomCenter" >
                    @foreach (InvoiceSubjectType item in Enum.GetValues(typeof(InvoiceSubjectType))){
                                <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>}
                </MudSelect>
                <MudSelect T="InvoicePattern"ValueChanged="@PatternChanged"  Label="الگوی صورتحساب"  AnchorOrigin="Origin.BottomCenter">
                     @foreach (InvoicePattern item in Enum.GetValues(typeof(InvoicePattern))){
                                <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>}
                </MudSelect>
            </MudCardContent>
           
        </MudCard>
      
    </MudItem>
    <MudItem xs="8" sm="5">
        <MudCard>
            <MudCardContent>
                
                 <MudSelect T="IntyType"  ValueChanged="@IntyChanged"  Label="نوع صورتحساب‌" AnchorOrigin="Origin.BottomCenter">
                 
                   @foreach (IntyType item in Enum.GetValues(typeof(IntyType))){
                                <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>}
                </MudSelect> 
                 <MudSelect T="PaymentType"  ValueChanged="@PaymentChanged"  Label="روش تسویه" AnchorOrigin="Origin.BottomCenter">
                 
                   @foreach (PaymentType item in Enum.GetValues(typeof(PaymentType))){
                                <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>}
                </MudSelect>
                <MudTextField  Disabled="true"Label="مجموع مبلغ قبل از کسر تخفیف"  @bind-Value="model.Tprdis" For="@(() => model.Tprdis)"/>
                <MudTextField Disabled="true" Label="مجموع تخفیفات"  @bind-Value="model.Tdis" />

                <MudDatePicker Label="تاریخ فاکتور" Date="date" DateFormat="@dateFormat" TextChanged="DatePickerTextChanged" />
                </MudCardContent>
        </MudCard>
    </MudItem>
    

<MudItem xs="15" sm="20">
  <MudCard>
    <MudTable Items="invoiceItems" Hover="true" RowEditCommit="edit" SortLabel="Sort By" Elevation="0">
        <ToolBarContent>
        <MudText Typo="Typo.h6">اقلام فاکتور مالیاتی</MudText>
        <MudSpacer />
        <MudButton OnClick=@AddEmptyElement>+</MudButton>
        
    </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<InvoiceItem, object>(x=>x.Sstid)">شناسه کالا</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<InvoiceItem, object>(x=>x.Am)">تعداد</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<InvoiceItem, object>(x=>x.Fee)">مبلغ واحد کالا</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<InvoiceItem, object>(x=>x.Prdis!)">مبلغ قبل از تخفیف</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<InvoiceItem, object>(x=>x.Dis!)">مبلغ تخفیف</MudTableSortLabel></MudTh>
             <MudTh><MudTableSortLabel SortBy="new Func<InvoiceItem, object>(x=>x.Adis!)">مبلغ بعد از تخفیف</MudTableSortLabel></MudTh>
             <MudTh><MudTableSortLabel SortBy="new Func<InvoiceItem, object>(x=>x.Vra!)">نرخ مالیات بر ارزش افزوده</MudTableSortLabel></MudTh>
             <MudTh><MudTableSortLabel SortBy="new Func<InvoiceItem, object>(x=>x.Vam!)">مبلغ مالیات بر ارزش افزوده</MudTableSortLabel></MudTh>
              <MudTh><MudTableSortLabel SortBy="new Func<InvoiceItem, object>(x=>x.Tsstam!)">مبلغ کل کالا/خدمت</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="شناسه کالا">@context.Sstid</MudTd>
            <MudTd DataLabel="تعداد">@context.Am</MudTd>
            <MudTd DataLabel="مبلغ واحد کالا">@context.Fee</MudTd>
            <MudTd DataLabel="مبلغ قبل از تخفیف">@context.Prdis</MudTd>
            <MudTd DataLabel="مبلغ تخفیف">@context.Dis</MudTd>
            <MudTd DataLabel="مبلغ بعد از تخفیف">@context.Adis</MudTd>
            <MudTd DataLabel="نرخ مالیات بر ارزش افزوده">@context.Vra</MudTd>
            <MudTd DataLabel="مبلغ مالیات بر ارزش افزوده">@context.Vam</MudTd>
            <MudTd DataLabel="مبلغ کل کالا/خدمت">@context.Tsstam</MudTd>
        </RowTemplate>
          <RowEditingTemplate>
            <MudTd DataLabel="شناسه کالا"> <MudTextField @bind-Value="@context.Sstid" Required /></MudTd>
            <MudTd DataLabel="تعداد"><MudTextField  @bind-Value="@context.Am" Required /></MudTd>
            <MudTd DataLabel="مبلغ واحد کالا"><MudTextField  @bind-Value="@context.Fee" Required /></MudTd>
            <MudTd DataLabel="مبلغ قبل از تخفیف">@context.Prdis</MudTd>
            <MudTd DataLabel="مبلغ تخفیف"><MudTextField  @bind-Value="@context.Dis" Required /></MudTd>
            <MudTd DataLabel="مبلغ بعد از تخفیف">@context.Adis </MudTd>
            <MudTd DataLabel="نرخ مالیات بر ارزش افزوده"><MudTextField  @bind-Value="@context.Vra" Required /></MudTd>
            <MudTd DataLabel="مبلغ مالیات بر ارزش افزوده">@context.Vam</MudTd>
            <MudTd DataLabel="مبلغ کل کالا/خدمت">@context.Tsstam</MudTd>
        </RowEditingTemplate>
        
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
     </MudCard>
  </MudItem>
 <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="OnValidSubmit">Register</MudButton>
            </MudCardActions>

</MudGrid> 

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    string dateFormat = "yyyy-MM-dd";//"dd.MM.yyyy";
    Invoice model=new Invoice();
   
   DateTime? date=DateTime.Now;
  string us="A16XAX";
  
   string bound = "not set";
    private List<InvoiceItem> invoiceItems;
        private void edit(object invoiceItem){
            model.Tdis=model.Tdis+((InvoiceItem)invoiceItem).Dis;
        model.Tadis=model.Tadis+((InvoiceItem)invoiceItem).Adis;
      model.Tprdis=model.Tprdis+((InvoiceItem)invoiceItem).Prdis;
        model.Tvam=model.Tvam+((InvoiceItem)invoiceItem).Vam;
        model.Tbill=model.Tbill+((InvoiceItem)invoiceItem).Tsstam;
        model.Cap=model.Tbill;
          
        string jsonString = JsonSerializer.Serialize(model);

        Console.WriteLine(jsonString);
        }
     private void AddEmptyElement()
    {
        
        invoiceItems.Add(new InvoiceItem());
    }
    protected override async Task OnInitializedAsync()
    {
       
        invoiceItems = new List<InvoiceItem>();
    }
    private void calculateAll(){
        model.Tdis=invoiceItems.Sum(d=>d.Dis);
        model.Tadis=invoiceItems.Sum(d=>d.Adis);
        model.Tprdis=invoiceItems.Sum(d=>d.Prdis);
        model.Tvam=invoiceItems.Sum(d=>d.Vam);
        model.Tbill=invoiceItems.Sum(d=>d.Tsstam);
        model.Cap=model.Tbill;
    }
    private async Task OnValidSubmit()
    {
        success = true;
        model.Detail=invoiceItems;
       
         string bound = "not set";
        model.Indatim= date.Value.ToUniversalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds;
       calculateAll();
        var tax=new TaxData{
            After=model,
            Token="Test"
        };
        string jsonString = JsonSerializer.Serialize(model);

        Console.WriteLine(jsonString);
        using var httpClient=new HttpClient();
        httpClient.BaseAddress=new Uri("http://localhost:1401");
        @* using StringContent jsonContent = new(
        JsonSerializer.Serialize(tax),       
        "application/json"); *@
        JsonContent content = JsonContent.Create(tax);
    using HttpResponseMessage result=  await  httpClient.PostAsync("/sendInvoices",content);

        var jsonResponse = await result.Content.ReadAsStringAsync();
    Console.WriteLine($"{jsonResponse}\n");
    }

    public void SubjectTypeChanged(InvoiceSubjectType subjectType){
       

       model.Ins=(int)subjectType;
    }

    public void IntyChanged(IntyType intyType){
        model.Inty=(int)intyType;
    }
    public void PatternChanged(InvoicePattern invoicePattern){
       
        model.Inp=(int)invoicePattern;
    }
     public void PaymentChanged(PaymentType paymentType){
       
        model.Setm=(int)paymentType;
    }

     private void DatePickerTextChanged(string value)
    {
        if (value == null || value.Length < 6)
        {
            date = null;
        }
        else
        {
            string[] formats = { "ddMMyy", "dd.MM.yyyy", "dd.M.yyyy", "d.MM.yyyy", "d.M.yyyy", "dd.MM.yy", "dd.M.yy", "d.MM.yy", "d.M.yy","yyyy-MM-dd" };
            if (DateTime.TryParseExact(value, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime validDate))
            {
                date = validDate;
               model.Indatim= date.Value.ToUniversalTime().Subtract(new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)).TotalMilliseconds;
               Console.WriteLine(model.Indatim);
            }
            else
            {
                date = null;
            }
        }

        if (date.HasValue)
        {
            bound = date.Value.ToString(dateFormat); 
        }
        else
        {
            bound = "not set";
        }
    }
    
}
